<!DOCTYPE html>
<html>

<head>
    <title>{{title}}</title>
    <!-- Bootstrap và custom CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/5.3.0/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdn.datatables.net/2.0.0/css/dataTables.bootstrap5.css">

    <style>
        body,
        html {
            height: 100%;
        }

        #content {
            min-height: calc(100vh - 60px);
            /* Giả sử footer cao 60px */
            padding-bottom: 60px;
            /* Đảm bảo nội dung không bị footer che khuất */
        }

        #footer {
            height: 60px;
            position: relative;
            bottom: 0;
            width: 100%;
        }

        .truncate {
            max-width: 250px;
            /* Đặt chiều rộng tối đa của cell */
            overflow: hidden;
            /* Ẩn nội dung dư thừa */
            white-space: nowrap;
            /* Ngăn chặn xuống dòng */
            text-overflow: ellipsis;
            /* Hiển thị dấu "..." khi nội dung quá dài */
        }
    </style>
</head>

<body>

<div id="content">
    {{> navbar }}

    {{{body}}}
</div>

<div id="footer">
    {{> footer }}
</div>


<script src="https://code.jquery.com/jquery-3.2.1.slim.min.js"
        integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN"
        crossorigin="anonymous"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>

<script src="https://cdn.jsdelivr.net/npm/popper.js@1.12.9/dist/umd/popper.min.js"
        integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q"
        crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/js/bootstrap.min.js"
        integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl"
        crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<!-- Bootstrap và JavaScript -->
<script src="https://cdn.datatables.net/2.0.0/js/dataTables.js"></script>
<!-- DataTables Bootstrap 5 integration -->
<script src="https://cdn.datatables.net/2.0.0/js/dataTables.bootstrap5.js"></script>
<script>
    $(document).ready(function() {
        if ($('#main').length) {
            // Nếu có, khởi tạo DataTable cho phần tử có ID là #example
            $('#main').DataTable({
                columnDefs: [
                    { targets: 2, className: 'truncate' }, // Áp dụng cho cột đầu tiên
                ],
                paging: false,
            });
        }
    });

    $('#invite').click(function() {
        // Ẩn chữ "Mời Thành Viên" và hiển thị spinner
        $('.spinner-border').show();
        $('#invite').prop('disabled', true);

        $.ajax({
            url: '/task/invite',
            type: 'GET',
            success: function(data) {
                if (data.length > 0) {
                    Swal.fire({
                        title: 'Invite Success',
                        text: data.join(', '),
                        icon: 'success',
                    });
                }
                // Ẩn spinner và hiển thị lại chữ "Mời Thành Viên"
                $('#inviteText').show();
                $('.spinner-border').hide();
                $('#invite').prop('disabled', false);
            },
            error: function(xhr, status, error) {
                alert(xhr.responseText);
                // Ẩn spinner và hiển thị lại chữ "Mời Thành Viên"
                $('.spinner-border').hide();
                $('#invite').prop('disabled', false);
            },
        });
    });
</script>

<script>
    const  modalWorkSpace = $('#memberWorkspace');
    let workspaceMemberDataTable;
    $(document).ready(function() {
        $('#addWorkspaceButton').click(function() {
            Swal.fire({
                title: 'Add Workspace',
                html: `
                <input type="text" id="email" class="swal2-input" placeholder="Email">
                <input type="number" id="maxSlots" class="swal2-input" placeholder="Max Slots">
            `,
                showCancelButton: true,
                confirmButtonText: 'Add',
                preConfirm: () => {
                    const email = Swal.getPopup().querySelector('#email').value;
                    const maxSlots = Swal.getPopup().querySelector('#maxSlots').value;
                    if (!email || !maxSlots) {
                        Swal.showValidationMessage('Please enter email and max slots');
                    }
                    return { email: email, maxSlots: parseInt(maxSlots) };
                },
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: '/workspace',
                        type: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify(result.value),
                        success: function(data) {
                            Swal.fire(
                                'Added!',
                                'Your file has been added.',
                                'success',
                            );
                            $('#workspaceTable').DataTable().ajax.reload();
                        },
                        error: function(xhr, status, error) {

                            let responseJson = JSON.parse(xhr.responseText);
                            let message = responseJson.message;

                            Swal.fire(
                                'Error!',
                                message.join(`, `),
                                'error',
                            );
                        },
                    });
                }
            });
        });

        $('#workspaceTable').DataTable({
            'ajax': {
                'url': '/workspace/',
                'dataSrc': '',
            },
            'columns': [
                { 'data': 'id' },
                { 'data': 'email' },
                { 'data': 'maxSlots' },
                {
                    'data': 'members',
                    'render': function(data, type, row) {
                        return Array.isArray(data) ? data.length : 0;
                    }
                },
                {
                    'data': null,
                    'defaultContent': '',
                    'sortable': false,
                    'render': function(data, type, row) {
                        // Convert the row object into a string that can be passed via an onclick event.
                        // Note: This approach might need adjustments based on your data's complexity and size.
                        let rowDataString = encodeURIComponent(JSON.stringify(row));
                        return `
                                <button class="btn btn-primary" onclick='editWorkspace(${row.id}, "${rowDataString}")'>Edit</button>
                                <button class="btn btn-danger" onclick="deleteWorkspace(${row.id})">Delete</button>
                                <button class="btn btn-primary" onclick="showMember('${rowDataString}')">Show Member</button>
                            `;
                    },
                },
            ],

        });

    });

    function showMember(rowDataString) {
        console.log(rowDataString);
        let data = JSON.parse(decodeURIComponent(rowDataString));
        modalWorkSpace.modal('show');
        const workSpaceEmail = modalWorkSpace.find('#workSpaceEmail');
        workSpaceEmail.text(data.email);
        workspaceMemberTable = modalWorkSpace.find('#workspaceMemberTable');
        if ($.fn.DataTable.isDataTable(workspaceMemberTable)) {
            workspaceMemberTable.DataTable().destroy();
        }
        workspaceMemberTable.DataTable({
            'ajax': {
                'url': `/member/workspace/${data.id}`,
                'dataSrc': '',
            },
            'columns': [
                { 'data': 'id' },
                { 'data': 'email' },
                {
                    'data': null,
                    'defaultContent': '',
                    'sortable': false,
                    'render': function(data, type, row) {
                        return `
                                <button class="btn btn-danger" onclick="deleteMember(${row.id})">Delete</button>
                            `;
                    },
                },
            ],
            columnDefs: [
                { targets: 1, className: 'truncate' }, // Áp dụng cho cột đầu tiên
            ],
            paging: false

        });
        const addWorkspaceMemberButton = modalWorkSpace.find('#addWorkspaceMemberButton');
        addWorkspaceMemberButton.click(function() {
            addMember(data.id);
        });
    }

    function addMember(workspaceId) {
        $('#addMember').modal('show');
        const workspaceIdInput = $('#workspaceId');
        workspaceIdInput.val(workspaceId);
        const addMemberBtn = $('#addMemberBtn');
        addMemberBtn.click(function() {
            const email = $('#email').val();
            const workspaceId = parseInt($('#workspaceId').val());
            $.ajax({
                url: '/member',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ email, workspaceId }),
                success: function(data) {
                    Swal.fire(
                        'Added!',
                        'Your file has been added.',
                        'success',
                    );
                    workspaceMemberTable.DataTable().ajax.reload();
                    $('#workspaceTable').DataTable().ajax.reload();
                    $(`#email`).val('');
                    

                },
                error: function(xhr, status, error) {
                    let responseJson = JSON.parse(xhr.responseText);
                    let message = responseJson.message;
                    let result = typeof message === 'string' ? message : message.join(`, `);
                    Swal.fire(
                        'Error!',
                        result,
                        'error',
                    );
                },
            });
        });

    }


    function deleteMember(id, dataTable) {
        Swal.fire({
            title: 'Are you sure?',
            text: 'You won\'t be able to revert this!',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, delete it!',
        }).then((result) => {
            if (result.isConfirmed) {
                $.ajax({
                    url: `/member/${id}`,
                    type: 'DELETE',
                    success: function(data) {
                        Swal.fire(
                            'Deleted!',
                            'Your file has been deleted.',
                            'success',
                        );
                        workspaceMemberTable.DataTable().ajax.reload();
                    },
                    error: function(xhr, status, error) {
                        let responseJson = JSON.parse(xhr.responseText);
                        let message = responseJson.message;

                        Swal.fire(
                            'Error!',
                            message,
                            'error',
                        );
                    },
                });
            }
        });
    }
    function editWorkspace(id, rowDataString) {
        let data = JSON.parse(decodeURIComponent(rowDataString));
        Swal.fire({
            title: 'Edit Workspace',
            // Fill the inputs with the current values.
            html: `
            <input type="text" id="email" class="swal2-input" placeholder="Email" value="${data.email}">
            <input type="number" id="maxSlots" class="swal2-input" placeholder="Max Slots" value="${data.maxSlots}">
        `,
            showCancelButton: true,
            confirmButtonText: 'Save',
            preConfirm: () => {
                const email = Swal.getPopup().querySelector('#email').value;
                const maxSlots = Swal.getPopup().querySelector('#maxSlots').value;
                if (!email || !maxSlots) {
                    Swal.showValidationMessage('Please enter email and max slots');
                }
                return { email: email, maxSlots: parseInt(maxSlots) };
            },
        }).then((result) => {
            if (result.isConfirmed) {
                $.ajax({
                    url: `/workspace/${id}`,
                    type: 'PATCH',
                    contentType: 'application/json',
                    data: JSON.stringify(result.value),
                    success: function(data) {
                        Swal.fire(
                            'Updated!',
                            'Your file has been updated.',
                            'success',
                        );
                        $('#workspaceTable').DataTable().ajax.reload();
                    },
                    error: function(xhr, status, error) {
                        let responseJson = JSON.parse(xhr.responseText);
                        let message = responseJson.message;

                        Swal.fire(
                            'Error!',
                            message.join(`, `),
                            'error',
                        );
                    },
                });
            }
        });
    }


    function deleteWorkspace(id) {
        Swal.fire({
            title: 'Are you sure?',
            text: 'You won\'t be able to revert this!',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, delete it!',
        }).then((result) => {
            if (result.isConfirmed) {
                $.ajax({
                    url: `/workspace/${id}`,
                    type: 'DELETE',
                    success: function(data) {
                        Swal.fire(
                            'Deleted!',
                            'Your file has been deleted.',
                            'success',
                        );
                        $('#workspaceTable').DataTable().ajax.reload();
                    },
                    error: function(xhr, status, error) {
                        let responseJson = JSON.parse(xhr.responseText);
                        let message = responseJson.message;

                        Swal.fire(
                            'Error!',
                            message,
                            'error',
                        );
                    },
                });
            }
        });
    }
</script>

<script>
    function editCookie(id, email, value) {
        const addCookieModal = $('#cookieModal');
        addCookieModal.modal('show');
        addCookieModal.find('.modal-title').text('Edit Cookie');
        addCookieModal.find('#email').val(email);
        addCookieModal.find('#value').val(value);
        addCookieModal.find('#addCookieForm').off('submit').submit(function(event) {
            event.preventDefault();
            const email = addCookieModal.find('#email').val();
            const value = addCookieModal.find('#value').val();
            $.ajax({
                url: `/cookie/${id}`,
                type: 'PATCH',
                contentType: 'application/json',
                data: JSON.stringify({ email, value }),
                success: function(data) {
                    Swal.fire(
                        'Updated!',
                        'Your file has been updated.',
                        'success',
                    );
                    $('#cookieTable').DataTable().ajax.reload();
                },
                error: function(xhr, status, error) {
                    let responseJson = JSON.parse(xhr.responseText);
                    let message = responseJson.message;
                    let result = typeof message === 'string' ? message : message.join(`, `);
                    Swal.fire(
                        'Error!',
                        result,
                        'error',
                    );
                },
            });
        });
    }

    function deleteCookie(id) {
        Swal.fire({
            title: 'Are you sure?',
            text: 'You won\'t be able to revert this!',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, delete it!',
        }).then((result) => {
            if (result.isConfirmed) {
                $.ajax({
                    url: `/cookie/${id}`,
                    type: 'DELETE',
                    success: function(data) {
                        Swal.fire(
                            'Deleted!',
                            'Your file has been deleted.',
                            'success',
                        );
                        $('#cookieTable').DataTable().ajax.reload();
                    },
                    error: function(xhr, status, error) {
                        let responseJson = JSON.parse(xhr.responseText);
                        let message = responseJson.message;

                        Swal.fire(
                            'Error!',
                            message,
                            'error',
                        );
                    },
                });
            }
        });
    }
    $(document).ready(function() {
        $('#cookieTable').DataTable({
            'ajax': {
                'url': '/cookie',
                'dataSrc': '',
            },
            'columns': [
                { 'data': 'id' },
                { 'data': 'email' },
                { 'data': 'value' },
                { 'data': 'value' ,
                    'render': function(data, type, row) {
                        return `<span class="badge bg-${row.value === 'error' ? 'danger' : 'success'}">${row.value==='error' ? 'Error' : 'Success'}</span>`;
                    },
                },
                { 'data': 'createdAt' },
                { 'data': 'updatedAt' },
                {
                    'data': null,
                    'defaultContent': '',
                    'sortable': false,
                    'render': function(data, type, row) {
                        return `
                            <button class="btn btn-primary" onclick='editCookie(${row.id}, "${row.email}", "${row.value}")'>Edit</button>
                            <button class="btn btn-danger" onclick="deleteCookie(${row.id})">Delete</button>
                        `;
                    },
                },
            ],
        });
        

        $('#addCookie').click(function() {
            const addCookieModal = $('#cookieModal');
            addCookieModal.modal('show');
            addCookieModal.find('.modal-title').text('Add Cookie');
            addCookieModal.find('#email').val('');
            addCookieModal.find('#value').val('');
            addCookieModal.find('#addCookieForm').off('submit').submit(function(event) {
                event.preventDefault();
                const email = addCookieModal.find('#email').val();
                const value = addCookieModal.find('#value').val();
                $.ajax({
                    url: '/cookie',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({ email, value }),
                    success: function(data) {
                        Swal.fire(
                            'Added!',
                            'Your file has been added.',
                            'success',
                        );
                        $('#cookieTable').DataTable().ajax.reload();
                    },
                    error: function(xhr, status, error) {
                        let responseJson = JSON.parse(xhr.responseText);
                        let message = responseJson.message;
                        let result = typeof message === 'string' ? message : message.join(`, `);
                        Swal.fire(
                            'Error!',
                            result,
                            'error',
                        );
                    },
                });
            });


        });


    });
    
</script>
</body>

</html>